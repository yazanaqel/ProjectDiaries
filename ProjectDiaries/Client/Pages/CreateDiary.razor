@page "/create"
@inherits CreateDiaryBase

<PageTitle>Create a Diary</PageTitle>
<h3>Create a New Diary</h3>

<EditForm Model="@newDiary" OnValidSubmit="HandleSubmit">

    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="newDiary.Title" class="form-control" />
        <ValidationMessage For="@(() => newDiary.Title)" />
    </div>
    <div class="form-control-file">
        <label for="image">Image</label>
        <InputFile OnChange="OnFileChange" />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newDiary.Description" class="form-control" />
    </div>
    <div class="form-group">
        <label for="content">Content</label>
        <InputTextArea id="content" @bind-Value="newDiary.Content" class="form-control" />
    </div>


	<button type="submit" class="btn btn-primary">Save</button>
    <ValidationSummary />

</EditForm>

@code {

    ProjectDiaries.Shared.Diary newDiary = new ProjectDiaries.Shared.Diary();

    async Task CreateNewDiary()
    {
        var result = await DiaryService.CreateDiary(newDiary);
        NavigationManager.NavigateTo($"diary/{result.Id}");
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 1060, 1060);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        newDiary.Image = imageData;
    }
}
